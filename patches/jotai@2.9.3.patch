diff --git a/esm/vanilla.mjs b/esm/vanilla.mjs
index 798ddaa626fbfac8bf585cc12e6ba6c4988c4954..b74a27059633ff7d5a8064cbd1fb9781b4c4e444 100644
--- a/esm/vanilla.mjs
+++ b/esm/vanilla.mjs
@@ -178,7 +178,7 @@ const buildStore = (getAtomState) => {
           completePromise
         );
         if (continuablePromise.status === PENDING) {
-          for (const a of atomState.d.keys()) {
+          for (const a of Array.from(atomState.d.keys())) {
             addPendingContinuablePromiseToDependency(
               atom,
               continuablePromise,
@@ -338,7 +338,7 @@ const buildStore = (getAtomState) => {
     for (let i = topsortedAtoms.length - 1; i >= 0; --i) {
       const [a, aState, prevEpochNumber] = topsortedAtoms[i];
       let hasChangedDeps = false;
-      for (const dep of aState.d.keys()) {
+      for (const dep of Array.from(aState.d.keys())) {
         if (dep !== a && changedAtoms.has(dep)) {
           hasChangedDeps = true;
           break;
@@ -390,7 +390,7 @@ const buildStore = (getAtomState) => {
   };
   const mountDependencies = (pending, atom, atomState) => {
     if (atomState.m && !getPendingContinuablePromise(atomState)) {
-      for (const a of atomState.d.keys()) {
+      for (const a of Array.from(atomState.d.keys())) {
         if (!atomState.m.d.has(a)) {
           const aMounted = mountAtom(pending, a, getAtomState(a, atomState));
           aMounted.t.add(atom);
@@ -409,7 +409,7 @@ const buildStore = (getAtomState) => {
   const mountAtom = (pending, atom, atomState) => {
     if (!atomState.m) {
       readAtomState(pending, atom, atomState);
-      for (const a of atomState.d.keys()) {
+      for (const a of Array.from(atomState.d.keys())) {
         const aMounted = mountAtom(pending, a, getAtomState(a, atomState));
         aMounted.t.add(atom);
       }
@@ -451,7 +451,7 @@ const buildStore = (getAtomState) => {
       if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production") {
         debugMountedAtoms.delete(atom);
       }
-      for (const a of atomState.d.keys()) {
+      for (const a of Array.from(atomState.d.keys())) {
         const aMounted = unmountAtom(pending, a, getAtomState(a, atomState));
         aMounted == null ? void 0 : aMounted.t.delete(atom);
       }
